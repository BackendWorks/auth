// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid()) @map("id")
  email           String?   @unique @map("email")
  password        String?   @map("password")
  firstName        String?   @map("first_name")
  lastName        String?   @map("last_name")
  patronymic      String?   @map("patronymic")
  avatar          String?   @map("avatar")
  isEmailVerified  Boolean   @default(false) @map("is_email_verified")
  isPhoneVerified  Boolean   @default(false) @map("is_phone_verified")
  verification     String?   @unique
  verificationExpires DateTime? @map("verification_expires")
  loginAttempts       Int       @default(0) @map("login_attempts")
  blockExpires        DateTime? @map("block_expires")
  phoneNumber     String?   @unique @map("phone_number")
  role            Role
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  deletedAt       DateTime? @map("deleted_at")

  @@map("users")
  PhoneCode PhoneCode[]

  userCompanies UserCompany[]
}

model PhoneCode {
  id            String   @id @default(uuid())
  userId        String
  phoneCodeHash String
  requestCount  Int       @default(0)
  lastSentAt    DateTime?
  expiresAt     DateTime?
  blockedUntil  DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("phone_code")
  user          User      @relation(fields: [userId], references: [id])

}

model ForgotPassword {
  id            String   @id @default(uuid())
  email         String   @unique
  verification  String
  firstUsed     Boolean  @default(false)
  finalUsed     Boolean  @default(false)
  expires       DateTime
  ip            String
  browser       String
  country       String
  ipChanged     String?
  browserChanged String?
  countryChanged String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("forgot_passwords")
}

model Company {
  id                String   @id @default(uuid())
  directorFirstName  String
  directorLastName   String
  directorPatronymic String?
  inn         String?
  ogrn        String?
  name        String
  country     String?
  city        String?
  legalAddress String?
  email       String?
  phone       String?
  description String?
  documentUrl String?
  logoUrl     String?
  status      CompanyVerificationStatus @default(UNVERIFIED)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("companies")

  userCompanies UserCompany[]
}

model UserCompany {
  id        String   @id @default(uuid())
  userId    String
  companyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  company Company @relation(fields: [companyId], references: [id])

  @@map("user_company")

  @@unique([userId, companyId])
}

enum CompanyVerificationStatus {
  UNVERIFIED @map("UNVERIFIED")
  VERIFIED   @map("VERIFIED")
}

enum Role {
  ADMIN @map("ADMIN")
  USER  @map("USER")
}
