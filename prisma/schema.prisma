generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String           @id @default(uuid()) @map("id")
  email               String?          @unique @map("email")
  password            String?          @map("password")
  firstName           String?          @map("first_name")
  lastName            String?          @map("last_name")
  avatar              String?          @map("avatar")
  phoneNumber         String?          @unique @map("phone_number")
  role                Role
  createdAt           DateTime         @default(now()) @map("created_at")
  updatedAt           DateTime         @updatedAt @map("updated_at")
  deletedAt           DateTime?        @map("deleted_at")
  isEmailVerified     Boolean          @default(false) @map("is_email_verified")
  isPhoneVerified     Boolean          @default(false) @map("is_phone_verified")
  patronymic          String?          @map("patronymic")
  verification        String?          @unique
  blockExpires        DateTime?        @map("block_expires")
  loginAttempts       Int              @default(0) @map("login_attempts")
  verificationExpires DateTime?        @map("verification_expires")
  companyId           String?
  companyRequests     CompanyRequest[]
  PhoneCode           PhoneCode?
  company             Company?         @relation(fields: [companyId], references: [id])

  @@map("users")
}

model PhoneCode {
  id            String    @id @default(uuid())
  userId        String?   @unique
  phone         String    @unique
  phoneCodeHash String
  requestCount  Int       @default(0)
  lastSentAt    DateTime?
  expiresAt     DateTime?
  blockedUntil  DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User?     @relation(fields: [userId], references: [id])

  @@map("phone_code")
}

model ForgotPassword {
  id             String   @id @default(uuid())
  email          String   @unique
  verification   String
  firstUsed      Boolean  @default(false)
  finalUsed      Boolean  @default(false)
  expires        DateTime
  ip             String
  browser        String
  country        String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  browserChanged String?
  countryChanged String?
  ipChanged      String?

  @@map("forgot_passwords")
}

model Company {
  id                 String                    @id @default(uuid())
  directorFirstName  String
  directorLastName   String
  directorPatronymic String
  inn                String
  ogrn               String
  organizationName   String
  country            String?
  city               String?
  legalAddress       String
  email              String
  phone              String
  description        String
  documentUrl        String
  logoUrl            String?
  status             CompanyVerificationStatus @default(UNVERIFIED)
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime                  @updatedAt
  companyRequests    CompanyRequest[]
  users              User[]
  companyDocuments   CompanyDocument[]

  @@map("companies")
}

model CompanyRequest {
  id        String               @id @default(uuid())
  userId    String
  companyId String
  status    CompanyRequestStatus @default(PENDING)
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  company   Company              @relation(fields: [companyId], references: [id])
  user      User                 @relation(fields: [userId], references: [id])

  @@map("company_requests")
}

model CompanyDocument {
  id          String   @id @default(uuid())
  companyId   String
  fileId        String
  documentUrl String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  company     Company  @relation(fields: [companyId], references: [id])

  @@map("company_documents")
}

enum CompanyVerificationStatus {
  UNVERIFIED @map("UNVERIFIED")
  VERIFIED   @map("VERIFIED")
}

enum Role {
  ADMIN @map("ADMIN")
  USER  @map("USER")
}

enum CompanyRequestStatus {
  PENDING
  APPROVED
  DECLINED
}
